__author__ = 'rc1492'__created__ = '2015'import re# Find segment using fixed location & lengthstring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'assert string[53:62] == '221604732'# Find first instance of pattern using Regex# https://docs.python.org/3/library/re.html# import restring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'pattern = re.compile('\d{9}')result = pattern.search(string)assert result.group(0) == '221604732'# Find all instances of pattern using Regex# https://docs.python.org/2/howto/regex.html# import restring = '+12036556943'pattern = re.compile('(\+\d+)(\d{3})(\d{3})(\d{4})')segments = pattern.findall(string)assert segments[0][1] + '.' + segments[0][2] + '.' + segments[0][3] == '203.655.6943'# Replace all instances of patternstring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'assert string.replace('\/','/') == 'http://www.meetup.com/insidestartupsclub/events/221604732/'# Replace all instances of pattern using Regex# https://docs.python.org/3/library/re.html# import restring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'pattern = re.compile('\\\\')assert pattern.sub('', string) == 'http://www.meetup.com/insidestartupsclub/events/221604732/'# List of Segments Split by Common Elementstring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'setA = ['http:', 'www.meetup.com', 'insidestartupsclub', 'events', '221604732']segments = string.split('\/')setB = []for i in range(0,len(segments)):    if segments[i]:        setB.append(segments[i])assert setB[3] == setA[3]# List of Segments Split by Regex Pattern# https://docs.python.org/3/library/re.html# import restring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'setA = ['http:', 'www.meetup.com', 'insidestartupsclub', 'events', '221604732']pattern1 = re.compile('\\\\/')pattern2 = re.compile(r'\\/') # escape character handlingsegments1 = pattern1.split(string)setB = []for i in range(0,len(segments)):    if segments[i]:        setB.append(segments[i])segments2 = pattern2.split(string)setC = []for i in range(0,len(segments)):    if segments[i]:        setC.append(segments[i])assert setB[3] == setA[3] == setC[3]# List of Segments Grouped by Regex Pattern# https://docs.python.org/2/howto/regex.html# import restring = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'set = ['http:', 'www.meetup.com', 'insidestartupsclub', 'events', '221604732']pattern = re.compile('[a-zA-Z0-9.:]+')assert pattern.findall(string)[3] == set[3]class labParse:    '''        a class of methods for parsing data found in strings        import re    '''    def validateAlphaNumeric(string):        '''            verifies that a given string is an alphanumeric            https://docs.python.org/2/howto/regex.html            import re        :param string: string        :return: boolean        '''        if not isinstance(string, str):            return TypeError('input must be a string.')        else:            pattern = re.compile('\W+')            if not pattern.findall(string):                return True            else:                return False    def validateURL(string):        '''            verifies that a given string has valid URL syntax            https://docs.python.org/2/howto/regex.html            https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains            import re        :param string: string        :return: boolean        '''        if not string:            raise Exception('input does not have all required parameters')        elif not isinstance(string, str):            return False        else:            pattern1 = re.compile('https?://')            pattern2 = re.compile('[\w\-]+\.[a-z][a-z]+/')            pattern3 = re.compile('[\w\-]+\.xn\-\-[a-z0-9]+/')            pattern4 = re.compile('[^0-9a-zA-Z/:=_,&~@#\.\-\?\+\$]+')            if (pattern1.match(string) or pattern2.search(string) or pattern3.search(string)) and \                   not pattern4.findall(string):                return True            else:                return False    def validateEmail(string):        '''            verifies that a given string has valid email syntax            https://docs.python.org/2/howto/regex.html            import re        :param string:        :return: boolean        '''        if not string:            raise Exception('input does not have all required parameters')        elif not isinstance(string, str):            return False        else:            pattern1 = re.compile('[\w\.\-]+@[\w\-\.]+\.[a-z][a-z]+$')            pattern2 = re.compile('[\w\.\-]+@[\w\-\.]+\.xn\-\-[a-z0-9]+$')            pattern3 = re.compile('[^\w@\.\-]+')            if (pattern1.match(string) or pattern2.match(string)) and not pattern3.match(string):                return True            else:                return False    def extractByFind(string, prefix, suffix):        '''            method for finding a single segment using distinct prefix & suffix        :param string: string        :param prefix: string substring of string input before desired segment        :param suffix: string substring of string input after desired segment        :return:        '''        start = string.find(prefix) + len(prefix)        stop = string.rfind(suffix)        return string[start:stop]    def extractByRegex(string, pattern, prefix=None, suffix=None):        '''            method for finding one or more segments using a regex pattern        :param string: string        :param pattern: string with Regex syntax        :param prefix: string with Regex syntax        :param suffix: string with Regex syntax        :return: list        '''        if not string or not pattern:            raise Exception('input does not have all required parameters')        elif not isinstance(string, str) or not isinstance(pattern, str):            raise Exception('required inputs are not the correct data types')        else:            prefix_test = False            suffix_test = False            segment = pattern            if not prefix:                pass            elif not isinstance(prefix, str):                raise Exception('prefix must be a string')            else:                segment = prefix + segment                prefix_test = True                if '\\' in prefix:                    prefix = prefix.replace('\\\\','\\')            if not suffix:                pass            elif not isinstance(suffix, str):                raise Exception('suffix must be a string')            else:                segment = segment + suffix                suffix_test = True                if '\\' in suffix:                    suffix = suffix.replace('\\\\','\\')            segment_pattern = re.compile(segment)            results = segment_pattern.findall(string)            s = []            if not results:                pass            else:                for i in range(0, len(results)):                    if prefix_test:                        start = results[i].find(prefix) + len(prefix)                    else:                        start = 0                    if suffix_test:                        stop = results[i].rfind(suffix)                    else:                        stop = len(results[i])                    s.append(results[i][start:stop])            return s    def stripHTML(string):        '''            removes all html markup elements from a string            https://docs.python.org/3/library/re.html            database keywords https://cassandra.apache.org/doc/cql3/CQL.html#appendixA            import re        :param string: string        :return: string        '''        # re.S create DOTALL flag to make . = ANY character at all        pattern1 = re.compile('<!--.+?-->', re.S) # html comments        pattern2 = re.compile('<[^>]+?>') # html selectors        pattern3 = re.compile('&.+?;') # non-ascii characters        stripA = pattern1.sub('', string)        stripB = pattern2.sub('', stripA)        stripC = pattern3.sub('', stripB)        return stripC    def stripScripts(string):        '''            removes all scripts and style elements from an html string            https://docs.python.org/3/library/re.html            database keywords https://cassandra.apache.org/doc/cql3/CQL.html#appendixA            import re        :param string: string        :return: string        '''        # re.S create DOTALL flag to make . = ANY character at all        pattern1 = re.compile('<script.+?</script>', re.S) # html scripts        pattern2 = re.compile('<style>.+?</style>', re.S) # html styles        stripA = pattern1.sub('', string)        stripB = pattern2.sub('', stripA)        return stripB    def stripEscapes(string):        '''            removes all scripts and style elements from an html string            https://docs.python.org/3/library/re.html            database keywords https://cassandra.apache.org/doc/cql3/CQL.html#appendixA            import re        :param string: string        :return: string        '''        # re.S create DOTALL flag to make . = ANY character at all        pattern1 = re.compile(r'\\n') # new line        pattern2 = re.compile(r'\\t') # tab        pattern3 = re.compile(r'\\') # escape character        stripA = pattern1.sub('', string)        stripB = pattern2.sub('', stripA)        stripC = pattern3.sub('', stripB)        return stripCassert labParse.validateAlphaNumeric('http:\/\/www.meetup.com\/insidestartupsclub\/') == Falseassert labParse.validateAlphaNumeric('insidestartupsclub') == Trueassert labParse.validateAlphaNumeric(123) == Falseassert labParse.validateURL('http:\/\/www.meetup.com\/insidestartupsclub\/events\/221\/') == Falseassert labParse.validateURL('http://www.meetup.com/<script>') == Falseassert labParse.validateURL('http://www.meetup.com/insidestartups/events/2/?p=7&k=U_-,&~@#+$') == Trueassert labParse.validateURL('u.me/') == Trueassert labParse.validateURL(123) == Falseassert labParse.validateEmail('r@m.me') == Trueassert labParse.validateEmail('!@m.me') == Falseassert labParse.validateEmail('really_long-emailname.foruser@really.longemailaddress.com') == Trueassert labParse.validateEmail('number@the.topd0main') == Falseassert labParse.validateEmail('strange@character$.com') == Falseassert labParse.validateEmail('r@me.xn--internationaltopdomain') == Truetest = 'http:\/\/www.meetup.com\/insidestartupsclub\/events\/221604732\/'assert labParse.extractByFind(test, 'events\/', '\/') == '221604732'assert labParse.extractByRegex(test, '\d+', 'events\\\\/', '\\\\/')[0] == '221604732'assert labParse.extractByRegex(test, '\d+', 'events\\\\/')[0] == '221604732'assert labParse.extractByRegex(test, '\d+', suffix='\\\\/')[0] == '221604732'assert labParse.extractByRegex(test, '\d+')[0] == '221604732'assert labParse.extractByRegex(test, '[A-Z]+') == []assert labParse.extractByRegex(test, '\d+', 'A') == []assert labParse.extractByRegex(test, '[a-zA-Z0-9.:]+')[4] == '221604732'test = '<p>Drinks with <b><a href=\"http:\/\/uncubed.com\/\">Uncubed<\/a><\/b>.<\/p>'noEscapes = '<p>Drinks with <b><a href="http://uncubed.com/">Uncubed</a></b>.</p>'assert labParse.stripHTML(test) == 'Drinks with Uncubed.'assert labParse.stripEscapes(test) == noEscapes